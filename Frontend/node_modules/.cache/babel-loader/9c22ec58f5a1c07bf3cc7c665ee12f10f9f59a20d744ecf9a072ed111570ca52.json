{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = useStableMemo;\nvar _react = require(\"react\");\nfunction isEqual(a, b) {\n  if (a.length !== b.length) return false;\n  for (var i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Identical to `useMemo` _except_ that it provides a semantic guarantee that\n * values will not be invalidated unless the dependencies change. This is unlike\n * the built in `useMemo` which may discard memoized values for performance reasons.\n *\n * @param factory A function that returns a value to be memoized\n * @param deps A dependency array\n */\nfunction useStableMemo(factory, deps) {\n  var isValid = true;\n  var valueRef = (0, _react.useRef)(); // initial hook call\n\n  if (!valueRef.current) {\n    valueRef.current = {\n      deps: deps,\n      result: factory()\n    }; // subsequent calls\n  } else {\n    isValid = !!(deps && valueRef.current.deps && isEqual(deps, valueRef.current.deps));\n  }\n  var cache = isValid ? valueRef.current : {\n    deps: deps,\n    result: factory()\n  }; // must update immediately so any sync renders here don't cause an infinite loop\n\n  valueRef.current = cache;\n  return cache.result;\n}","map":{"version":3,"names":["exports","__esModule","default","useStableMemo","_react","require","isEqual","a","b","length","i","factory","deps","isValid","valueRef","useRef","current","result","cache"],"sources":["C:/Users/nebojsa.marjanovic/Desktop/real_estate_price_forecaster/node_modules/@restart/hooks/cjs/useStableMemo.js"],"sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.default = useStableMemo;\n\nvar _react = require(\"react\");\n\nfunction isEqual(a, b) {\n  if (a.length !== b.length) return false;\n\n  for (var i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Identical to `useMemo` _except_ that it provides a semantic guarantee that\n * values will not be invalidated unless the dependencies change. This is unlike\n * the built in `useMemo` which may discard memoized values for performance reasons.\n *\n * @param factory A function that returns a value to be memoized\n * @param deps A dependency array\n */\nfunction useStableMemo(factory, deps) {\n  var isValid = true;\n  var valueRef = (0, _react.useRef)(); // initial hook call\n\n  if (!valueRef.current) {\n    valueRef.current = {\n      deps: deps,\n      result: factory()\n    }; // subsequent calls\n  } else {\n    isValid = !!(deps && valueRef.current.deps && isEqual(deps, valueRef.current.deps));\n  }\n\n  var cache = isValid ? valueRef.current : {\n    deps: deps,\n    result: factory()\n  }; // must update immediately so any sync renders here don't cause an infinite loop\n\n  valueRef.current = cache;\n  return cache.result;\n}"],"mappings":"AAAA,YAAY;;AAEZA,OAAO,CAACC,UAAU,GAAG,IAAI;AACzBD,OAAO,CAACE,OAAO,GAAGC,aAAa;AAE/B,IAAIC,MAAM,GAAGC,OAAO,CAAC,OAAO,CAAC;AAE7B,SAASC,OAAOA,CAACC,CAAC,EAAEC,CAAC,EAAE;EACrB,IAAID,CAAC,CAACE,MAAM,KAAKD,CAAC,CAACC,MAAM,EAAE,OAAO,KAAK;EAEvC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,CAAC,CAACE,MAAM,EAAEC,CAAC,EAAE,EAAE;IACjC,IAAIH,CAAC,CAACG,CAAC,CAAC,KAAKF,CAAC,CAACE,CAAC,CAAC,EAAE;MACjB,OAAO,KAAK;IACd;EACF;EAEA,OAAO,IAAI;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASP,aAAaA,CAACQ,OAAO,EAAEC,IAAI,EAAE;EACpC,IAAIC,OAAO,GAAG,IAAI;EAClB,IAAIC,QAAQ,GAAG,CAAC,CAAC,EAAEV,MAAM,CAACW,MAAM,GAAG,CAAC,CAAC;;EAErC,IAAI,CAACD,QAAQ,CAACE,OAAO,EAAE;IACrBF,QAAQ,CAACE,OAAO,GAAG;MACjBJ,IAAI,EAAEA,IAAI;MACVK,MAAM,EAAEN,OAAO;IACjB,CAAC,CAAC,CAAC;EACL,CAAC,MAAM;IACLE,OAAO,GAAG,CAAC,EAAED,IAAI,IAAIE,QAAQ,CAACE,OAAO,CAACJ,IAAI,IAAIN,OAAO,CAACM,IAAI,EAAEE,QAAQ,CAACE,OAAO,CAACJ,IAAI,CAAC,CAAC;EACrF;EAEA,IAAIM,KAAK,GAAGL,OAAO,GAAGC,QAAQ,CAACE,OAAO,GAAG;IACvCJ,IAAI,EAAEA,IAAI;IACVK,MAAM,EAAEN,OAAO;EACjB,CAAC,CAAC,CAAC;;EAEHG,QAAQ,CAACE,OAAO,GAAGE,KAAK;EACxB,OAAOA,KAAK,CAACD,MAAM;AACrB"},"metadata":{},"sourceType":"script","externalDependencies":[]}